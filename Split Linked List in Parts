725. Split Linked List in Parts

/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    vector<ListNode*> splitListToParts(ListNode* head, int k) {
        int size=0;
        ListNode* temp = head;
        while(temp){
            size++;
            temp=temp->next;
        }
        int nodesInEachBasket= size/k;
        int remainder= size%k;

        ListNode* curr= head;
        ListNode* prev= NULL;
        
        vector<ListNode*> result(k, NULL);
        for(int i =0 ; i<k ; i++){
            result[i]= curr;

            for(int count=0; count<nodesInEachBasket + (remainder>0? 1:0); count++){
                prev= curr;
                curr=curr->next;
            }
            if(prev!= NULL) prev->next= NULL;
            remainder--;
        }
        return result;
    }
};
