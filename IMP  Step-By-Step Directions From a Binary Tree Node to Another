2096. Step-By-Step Directions From a Binary Tree Node to Another

/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    TreeNode* lca( TreeNode* root, int p, int q)
    {
        if(root== NULL || root->val==p || root->val==q)
        return root;

        TreeNode * left=   lca(root->left, p , q);
        TreeNode* right=    lca(root->right, p , q);

        if(left== NULL) return right;
        else if(right== NULL) return left;
        else return root;
    }

    bool findpath(TreeNode* LCA,int Value, string &address )
    {
         if(LCA== NULL) return false;
         if(LCA->val== Value) return true;

         //explore left side of LCA
         address.push_back('L');
         if(findpath(LCA->left, Value, address))
          return true;

        address.pop_back();
        
        //explore right side of LCA
        address.push_back('R');
         if(findpath(LCA->right, Value, address))
          return true;

        address.pop_back();
        return false;  
    }

    string getDirections(TreeNode* root, int startValue, int destValue) {
         TreeNode* LCA= lca(root, startValue, destValue );

         string lcatosrc="";
         string lcatodest="";

         findpath(LCA, startValue, lcatosrc);
         findpath(LCA, destValue, lcatodest);

         string result="";

         for(int i =0 ; i<lcatosrc.length(); i++)
         result.push_back('U');

         result+=lcatodest;
         return result;
    }
};
